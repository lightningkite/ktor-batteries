// Package: com.lightningkite.ktordb
// Generated by Khrysalis
import KhrysalisRuntime
import Foundation

open class HasId<ID> where ID:Comparable, ID: Hashable, ID: Codable{
    var _id: ID { get { fatalError("You must override this getter") } }
}

public class HasIdFields {
    public init() {}

    public static let INSTANCE = HasIdFields()

    public func _id<ID, T>() -> DataClassProperty<T, ID> where ID:Comparable, ID: Hashable, ID: Codable, T: HasId<ID> {
        return DataClassProperty(
            name: "_id",
            get: { (it) -> ID in it._id } as (T) -> ID,
            set: { (_, _) -> T in fatalError() } as (T, ID) -> T,
            compare: compareBy(selector: { (it) in it._id }) as TypedComparator<T>?
        ) as DataClassProperty<T, ID>
    }
}

public protocol HasEmail {
    var email:String { get }
}

public class HasEmailFields {
    public init(){}

    public static let INSTANCE = HasEmailFields()

    public func email<T:HasEmail>() -> DataClassProperty<T, String> {
        return DataClassProperty(
            name:"email",
            get: { (it) -> String in it.email } as (T) -> String,
            set: { (_, _) -> T in fatalError() },
            compare: compareBy(selector: { (it) in it.email}) as TypedComparator<T>?
        ) as DataClassProperty<T, String>
    }
}
