// Package: com.lightningkite.ktordb
// Generated by Khrysalis, This file has been customized
import KhrysalisRuntime
import Foundation

public protocol HasId: AnyObject, Codable, Hashable {
    associatedtype ID : Comparable
    
    var _id: ID { get }
    
}


public class HasIdFields {
    public init() {
        //Necessary properties should be initialized now
    }
    public static let INSTANCE = HasIdFields()
    
    public func _id<T : HasId, ID : Comparable>() -> DataClassProperty<T, ID> {
        return (DataClassProperty(name: "_id", get: { (it) -> ID in it._id } as (T) -> ID, set: { (_, _) -> T in fatalError() } as (T, ID) -> T, compare: compareBy(selector: { (it) in it._id }) as TypedComparator<T>?) as DataClassProperty<T, ID>);
    }
}

public protocol HasEmail: AnyObject, Codable, Hashable {
    
    var email: String { get }
    
}


public class HasEmailFields {
    public init() {
        //Necessary properties should be initialized now
    }
    public static let INSTANCE = HasEmailFields()
    
    public func email<T : HasEmail>() -> DataClassProperty<T, String> {
        return (DataClassProperty(name: "email", get: { (it) -> String in it.email } as (T) -> String, set: { (_, _) -> T in fatalError() } as (T, String) -> T, compare: compareBy(selector: { (it) in it.email }) as TypedComparator<T>?) as DataClassProperty<T, String>);
    }
}

