// Package: com.lightningkite.ktordb.live
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import RxSwift
import RxSwiftPlus
import Foundation

public class LiveWriteModelApi<Model : HasId> : WriteModelApi<Model> {
    public var url: String
    public var token: String
    public var serializer: Model.Type
    public init(url: String, token: String, serializer: Model.Type) {
        self.url = url
        self.token = token
        self.serializer = serializer
        super.init()
        //Necessary properties should be initialized now
    }
    
    
    override public func post(_ value: Model) -> Single<Model> {
        return HttpClient.INSTANCE.call(url: self.url, method: HttpClient.INSTANCE.POST, headers: dictionaryOf(Pair("Authorization", "Bearer \(String(kotlin: self.token))")), body: value.toJsonRequestBody()).readJson(serializer: Model.self);
    }
    
    override public func postBulk(values: Array<Model>) -> Single<Array<Model>> {
        return HttpClient.INSTANCE.call(url: "\(String(kotlin: self.url))/bulk", method: HttpClient.INSTANCE.POST, headers: dictionaryOf(Pair("Authorization", "Bearer \(String(kotlin: self.token))")), body: values.toJsonRequestBody()).readJson(serializer: Array<Model>.self);
    }
    
    override public func put(_ value: Model) -> Single<Model> {
        return HttpClient.INSTANCE.call(url: "\(String(kotlin: self.url))/\(value._id)", method: HttpClient.INSTANCE.PUT, headers: dictionaryOf(Pair("Authorization", "Bearer \(String(kotlin: self.token))")), body: value.toJsonRequestBody()).readJson(serializer: Model.self);
    }
    
    override public func putBulk(values: Array<Model>) -> Single<Array<Model>> {
        return HttpClient.INSTANCE.call(url: "\(String(kotlin: self.url))/bulk", method: HttpClient.INSTANCE.PUT, headers: dictionaryOf(Pair("Authorization", "Bearer \(String(kotlin: self.token))")), body: values.toJsonRequestBody()).readJson(serializer: Array<Model>.self);
    }
    
    override public func patch(id: UUIDFor<Model>, modification: Modification<Model>) -> Single<Model> {
        return HttpClient.INSTANCE.call(url: "\(String(kotlin: self.url))/\(id)", method: HttpClient.INSTANCE.PATCH, headers: dictionaryOf(Pair("Authorization", "Bearer \(String(kotlin: self.token))")), body: modification.toJsonRequestBody()).readJson(serializer: Model.self);
    }
    
    override public func patchBulk(modification: MassModification<Model>) -> Single<Array<Model>> {
        return HttpClient.INSTANCE.call(url: "\(String(kotlin: self.url))/bulk", method: HttpClient.INSTANCE.PATCH, headers: dictionaryOf(Pair("Authorization", "Bearer \(String(kotlin: self.token))")), body: modification.toJsonRequestBody()).readJson(serializer: Array<Model>.self);
    }
    
    override public func delete(id: UUIDFor<Model>) -> Single<Void> {
        return HttpClient.INSTANCE.call(url: "\(String(kotlin: self.url))/\(id)", method: HttpClient.INSTANCE.DELETE, headers: dictionaryOf(Pair("Authorization", "Bearer \(String(kotlin: self.token))"))).discard();
    }
    
    override public func deleteBulk(_ condition: Condition<Model>) -> Single<Void> {
        return HttpClient.INSTANCE.call(url: "\(String(kotlin: self.url))/bulk", method: HttpClient.INSTANCE.DELETE, headers: dictionaryOf(Pair("Authorization", "Bearer \(String(kotlin: self.token))")), body: condition.toJsonRequestBody()).discard();
    }
}

private func quickTest<T: AltCodable, V: Codable>(item: T, item2: V, coder: Encoder) {
    try! T.encode(item, to: coder)
    item.toJsonString()
    item2.toJsonString()
}
