// Package: com.lightningkite.ktordb
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import Foundation

open class PartialDataClassProperty<K> : KEquatable, KHashable {
    public init() {
        //Necessary properties should be initialized now
    }
    
    open var name: String { get { TODO() } }
    open func anyGet(_ k: K) -> Any? { TODO() }
    open func anySet(_ k: K, v: Any?) -> K { TODO() }
    open var compare: TypedComparator<K>? { get { TODO() } }
    
    public func hashCode() -> Int {
        return self.name.hashValue;
    }
    public func equals(other: Any) -> Bool {
        return (other as? PartialDataClassProperty<K>)?.name == self.name;
    }
}
public class DataClassProperty<K, V> : PartialDataClassProperty<K> {
    private var _name: String
    override public var name: String { get { return self._name } set(value) { self._name = value } }
    public var get: (K) -> V
    public var set: (K, V) -> K
    private var _compare: TypedComparator<K>?
    override public var compare: TypedComparator<K>? { get { return self._compare } set(value) { self._compare = value } }
    public init(name: String, get: @escaping (K) -> V, set: @escaping (K, V) -> K, compare: TypedComparator<K>? = nil) {
        self._name = name
        self.get = get
        self.set = set
        self._compare = compare
        super.init()
        //Necessary properties should be initialized now
    }
    
    override public func anyGet(_ k: K) -> Any? {
        return self.get(k);
    }
    override public func anySet(_ k: K, v: Any?) -> K {
        return self.set(k, v as! V);
    }
}
